#Chuyue Zhang, 1005728303, zhangchuyue.zhang@mail.utoronto.ca
#Da Ma, 1006353474, da.ma@mail.utoronto.ca

1. Target1
Vulnerability: The vulnerability of target1.c is at line 8. The input string argv[1] is copied to buf without checking the length. 
               Since the size of the buf is 96, the input longer than 96 would cause a buffer overflow problem. 
Exploit: We could exploit this buffer overflow problem by inputting a large-size argv[1]. 
         Then the strcpy() function at line 8 would copy the input to the buf on the stack. 
         Finally, it would overwrite the return address of the function lab_main at address 0x3021fec8 by the input characters. 
         Thus, we could write the address of the shellcode at this position. Then the process would execute the shellcode when it returns. 

2. Target2
Vulnerability: The vulnerability of target2.c is at line 14 & 15, where in foo a loop is applied for string copy.
               272 bytes of copying to buffer with 256 bytes results in an overflow.
Exploit: Due to the possiblity of overflow, we copied arbitrary bytes into stack by overwriting the values of len and i, through which 
         the shellcode injected in the buffer could be executed. Another point to mention is that evironment variables are used to avoid
         undesired termination of exploit buffer caused by "\x00".

3. Target3
Vulnerability: The vulnerability of target3.c is at line 14. The element of the input string argv[1] is copied to buf one by one. 
               The restriction of the copy length ltarg, which is 88. Since the size of the buf is 64, 
               an input longer than 64 would cause a buffer overflow problem. 
Exploit: We could exploit this buffer overflow problem by inputting a large-size argv[1]. 
         Then the element copy process at line 8 would copy the input to the buf on the stack. 
         Finally, it would overwrite the return address of the function foo at address 0x3021fe98 by the input characters. 
         Thus, we could write the address of the shellcode at this position. Then the process would execute the shellcode when it returns.
         One thing to notice is that the copy process starts at 0x3021fe54, not 0x3021fe50 due to the process at line 13.

4. Target4
Vulnerability: The vulnerability of target4.c is at line 20, where in foo a loop is applied for string copy via pointers. Again, 169 bytes were 
               copied into a chunk of memory of 156 bytes, which causes an overflow.
Exploit: This overflow vulnerability permits us to alter the values of variables i and len, thereby enabling the copying of an arbitrary number of 
         bytes onto the stack. As stated in target 2, the values of len and i suggest the presence of "\x00" within their hexadecimal representations. 
         The presence of NULL characters prematurely terminates the exploit string. The exploit utilizes multiple environment variables to resolve it.

5. Target5
Vulnerability: 
Exploit: 

6. Target6
Vulnerability: 
Exploit: 
